# Converti les nombres contenu dans 2 registres en chaînes de caractères
# ASCII stockées aux adresses 0x004000 et 0x004009

.data 
opA: .word 0x12345678
opB: .word 0x90ABCDEF

destA: .word 0x00004000
destB: .word 0x00004010

.text
main:
    lw x11, opA             # charger mot1
    lw x12, destA           # charger adresse de destination 1
    jal hexstr              # routine de conversion (rd = x1 par défaut)
    lw x11, opB
    lw x12, destB
    jal hexstr

    # charger résultats dans x2 et x3
    lw x12, destA
    lw x2, 0(x12)    
    lw x3, 8(x12)
    lw x12, destB
    lw x4, 0(x12)
    lw x5, 8(x12)

done:
    ecall

hexstr:
    addi x5, x0, 8          # compteur pour 8 caractères dans un mot

loop:
    # pas de rotation dans le RV32I, on fait en routine avec shift

rotl4b:
    slli x13, x11, 4        # shift a gauche 4 bits
    srli x14, x11, 28       # shift a droite 28 bits
    or x11, x13, x14        # magie, comme si on avait un "roti x11, x11, 4"

    andi x15, x11, 0xF      # masque tout sauf le dernier "digit" 
    addi x9, x0, 9
    ble x15, x9, save        # verifie si entre 0 et 9 (pseudoinstruction)
    addi  x15, x15, 7       # 7 caractères entre '9' et 'A'

save:
    addi x15, x15, 48       # ASCII '0' = 48
    sb x15, 0(x12)          # écrit le caractère à l'adresse destination
    addi x12, x12, 1        # incrémente l'adresse destination
    addi x5, x5, -1         # décrémente le compteur
    bnez x5, loop           # pseudoinstruction, equivalent bne x5, x0, loop
    sb x0, 0(x12)           # caractère nul de fin de chaîne
    ret                     # pseudoinstruction, "return from subroutine"
                            #  équivalent de jalr x1, 0(x1)