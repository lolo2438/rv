include
|-- un fichier .h pour son .c

src
|- main.c
|- affichage.c (enoncer pdf)
|- decodeur.c
|- instruction/
|	|- 32_immediate.c
|	|- 16_immediate.c
|	|- (...).c
|- proc_state.c (registres, memoire, pc)
|- lecture.c (parser instruction)
|- validation.c (verifier instructions)


test
|-- un fichier test pour son .c
|unity

- Main:
	- Attendre commande utilisateur (Step ou continue)
	- Chercher instruction
	- Decoder instruction
	- Executer instruction (update les registres)
	- Update le program counter (tbd avec exec)
	- Update interface utilisateur
 
- Gestion d'impression dans la console
	- toute instruction avec une fleche qui indique ou on est
	- deux tableau: addr+ hex et dissasembly
	- flèche qui indique on est ou dans le code

- Lecture instruction
	1. Lecture fichier
	2. parser: texte ascii hexa -> binaire + bitwise operation + dessassemblage
	3. validation du code (check size + check opcode pr erreur + maybe check data)
	4. charger en memoire vive a la bonne addr

- Décodage (16 ebit/ 32b) (5 fichier -> immdiate.c, j...)
	1. Check opcode -> Aller dans fonction pour ce opcode -> structure 
	2. Executer la sous-fonction
		- Nom instruction = fonction?

- Désassemblage (Ex: 110101010101111101 -> addi x0 x1 5)
	1. Transformer instruction en texte
	- matrice de text pour chaque opcodes + autre choses
	- peut etre en meme temps que validation who knows
	- pc = offset tableau	

- Gestion des registres (tableau)
	1. Fichier avec registre statique
	2. Fonction pour interface avec registre: read, write

- Mémoire interne (mémoire d'instruction + memoire utilisateur)
	1. interface avec load/store
	2. lecture de la mémoire avec PC (addresse 0 -> debut programme)

- État processeur
	registre
	pc
	memoire ram

- Unity integration

- Définition interface

-BONUS
- interface graphique
- ELF

